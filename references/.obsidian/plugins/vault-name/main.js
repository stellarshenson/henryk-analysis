/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultNamePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  sticky: false,
  alignment: "flex-start",
  padding: "var(--size-2-2)",
  background: "var(--background-secondary)",
  border: "none",
  borderRadius: "var(--radius-m)",
  showIcon: false,
  icon: "vault",
  iconSize: "var(--icon-m)",
  iconColor: "var(--nav-item-color)",
  iconRotate: "0deg",
  titleFontSize: "var(--font-ui-medium)",
  titleColor: "var(--nav-item-color)",
  titleFont: "var(--font-interface)",
  titleLetterSpacing: "normal",
  titleWeight: "var(--font-normal)"
};
var VaultNamePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new VaultNameSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
    this.registerEvent(
      this.app.vault.on("create", () => {
        this.deactivateVaultName();
        this.activateVaultName();
      })
    );
    this.registerEvent(
      this.app.vault.on("delete", () => {
        this.deactivateVaultName();
        this.activateVaultName();
      })
    );
    console.log("Vault name plugin loaded");
  }
  onLayoutReady() {
    this.deactivateVaultName();
    this.activateVaultName();
  }
  onunload() {
    this.deactivateVaultName();
    console.log("Vault name plugin unloaded");
  }
  activateVaultName() {
    const navContainer = window.activeDocument.querySelector(".nav-files-container");
    const vaultNameWrapper = createDiv("nav-vault-name", (el) => {
      let ariaLabel = this.getBasePath() + "\n\n" + this.getFileCount() + ", " + this.getFolderCount();
      el.setAttribute("aria-label", ariaLabel);
      el.setAttribute("data-tooltip-position", "right");
      let wrapperStyles = "";
      if (this.settings.alignment !== "") {
        wrapperStyles += "--vault-name-alignment: " + this.settings.alignment + "; ";
      } else {
        wrapperStyles += "--vault-name-alignment: " + DEFAULT_SETTINGS.alignment + "; ";
      }
      if (this.settings.padding !== "") {
        wrapperStyles += " --vault-name-padding: " + this.settings.padding + "; ";
      } else {
        wrapperStyles += " --vault-name-padding: " + DEFAULT_SETTINGS.padding + "; ";
      }
      if (this.settings.sticky) {
        wrapperStyles += "--vault-name-position: sticky; --vault-name-top: 0; --vault-name-z-index: 9; ";
      } else {
        wrapperStyles += "--vault-name-position: relative; --vault-name-top: auto; --vault-name-z-index: inherit; ";
      }
      if (this.settings.border !== "") {
        wrapperStyles += "--vault-name-border: " + this.settings.border + "; ";
      } else {
        wrapperStyles += "--vault-name-border: " + DEFAULT_SETTINGS.border + "; ";
      }
      if (this.settings.borderRadius !== "") {
        wrapperStyles += "--vault-name-border-radius: " + this.settings.borderRadius + "; ";
      } else {
        wrapperStyles += "--vault-name-border-radius: " + DEFAULT_SETTINGS.borderRadius + "; ";
      }
      if (this.settings.background !== "") {
        wrapperStyles += "--vault-name-bgcolor: " + this.settings.background + "; ";
      } else {
        wrapperStyles += "--vault-name-bgcolor: " + DEFAULT_SETTINGS.background + "; ";
      }
      el.setAttribute(
        "style",
        wrapperStyles
      );
    });
    if (this.settings.showIcon) {
      const vaultNameIcon = createDiv("nav-vault-name-icon", (el) => {
        let iconStyles = "";
        if (this.settings.iconSize !== "") {
          iconStyles += "--vault-name-icon-size: " + this.settings.iconSize + "; ";
        } else {
          iconStyles += "--vault-name-icon-size: " + DEFAULT_SETTINGS.iconSize + "; ";
        }
        if (this.settings.iconColor !== "") {
          iconStyles += "--vault-name-icon-color: " + this.settings.iconColor + "; ";
        } else {
          iconStyles += "--vault-name-icon-color: " + DEFAULT_SETTINGS.iconColor + "; ";
        }
        if (this.settings.iconRotate !== "") {
          iconStyles += "--vault-name-icon-transform: " + this.settings.iconRotate + "; ";
        } else {
          iconStyles += "--vault-name-icon-transform: " + DEFAULT_SETTINGS.iconRotate + "; ";
        }
        el.setAttribute(
          "style",
          iconStyles
        );
        (0, import_obsidian.setIcon)(el, this.settings.icon);
      });
      vaultNameWrapper.appendChild(vaultNameIcon);
    }
    const vaultNameElement = createDiv("nav-vault-name-title", (el) => {
      el.textContent = this.app.vault.getName();
      let titleStyles = "";
      if (this.settings.titleColor !== "") {
        titleStyles += "--vault-name-title-color: " + this.settings.titleColor + "; ";
      } else {
        titleStyles += "--vault-name-title-color: " + DEFAULT_SETTINGS.titleColor + "; ";
      }
      if (this.settings.titleFont !== "") {
        titleStyles += "--vault-name-title-font: " + this.settings.titleFont + "; ";
      } else {
        titleStyles += "--vault-name-title-font: " + DEFAULT_SETTINGS.titleFont + "; ";
      }
      if (this.settings.titleFontSize !== "") {
        titleStyles += "--vault-name-title-size: " + this.settings.titleFontSize + "; ";
      } else {
        titleStyles += "--vault-name-title-size: " + DEFAULT_SETTINGS.titleFontSize + "; ";
      }
      if (this.settings.titleLetterSpacing !== "") {
        titleStyles += "--vault-name-title-letter-spacing: " + this.settings.titleLetterSpacing + "; ";
      } else {
        titleStyles += "--vault-name-title-letter-spacing: " + DEFAULT_SETTINGS.titleLetterSpacing + "; ";
      }
      if (this.settings.titleWeight !== "") {
        titleStyles += "--vault-name-title-weight: " + this.settings.titleWeight + "; ";
      } else {
        titleStyles += "--vault-name-title-weight: " + DEFAULT_SETTINGS.titleWeight + "; ";
      }
      el.setAttribute(
        "style",
        titleStyles
      );
    });
    vaultNameWrapper.appendChild(vaultNameElement);
    navContainer == null ? void 0 : navContainer.prepend(vaultNameWrapper);
  }
  deactivateVaultName() {
    var _a;
    (_a = window.activeDocument.querySelector(".nav-vault-name")) == null ? void 0 : _a.remove();
  }
  getBasePath() {
    const adapter = this.app.vault.adapter;
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      return adapter.getBasePath();
    }
  }
  getFileCount() {
    let fileCount = this.app.vault.getFiles().length;
    let plural = "";
    if (fileCount > 1) {
      plural = "s";
    }
    return fileCount.toLocaleString() + " file" + plural;
  }
  getFolderCount() {
    let allLoadedFile = this.app.vault.getAllLoadedFiles();
    let folderCount = 0;
    allLoadedFile.forEach((f) => {
      if (f instanceof import_obsidian.TFolder) {
        folderCount++;
      }
    });
    let plural = "";
    if (folderCount - 1 > 1) {
      plural = "s";
    }
    return (folderCount - 1).toLocaleString() + " folder" + plural;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.deactivateVaultName();
    this.activateVaultName();
  }
};
var VaultNameSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("vault-name-settings");
    new import_obsidian.Setting(containerEl).setName("General styles").setHeading();
    new import_obsidian.Setting(containerEl).setName("Sticky").setDesc('Enable to "pin" the vault name to the top of the file explorer. Default: disabled').addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.sticky).onChange(async (newValue) => {
        this.plugin.settings.sticky = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Alignment").setDesc("CSS justify-content value. Default: flex-start").addDropdown((dropdown) => {
      dropdown.addOptions({
        "flex-start": "flex-start",
        "center": "center",
        "flex-end": "flex-end"
      }).setValue(this.plugin.settings.alignment !== "" ? this.plugin.settings.alignment : "flex-start").onChange(async (newValue) => {
        this.plugin.settings.alignment = newValue;
        await this.plugin.saveSettings();
      });
    });
    let descPadding = document.createDocumentFragment();
    descPadding.append(
      "CSS padding value. For available variables, see ",
      descPadding.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Spacing",
        text: "Spacing",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Spacing", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--size-2-2)"
    );
    new import_obsidian.Setting(containerEl).setName("Padding").setDesc(descPadding).addText(
      (text) => text.setPlaceholder("var(--size-2-2)").setValue(this.plugin.settings.padding).onChange(async (newValue) => {
        this.plugin.settings.padding = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descBackground = document.createDocumentFragment();
    descBackground.append(
      "CSS background-color value. For available variables, see ",
      descBackground.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Colors",
        text: "Colors",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Colors", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--background-secondary)"
    );
    new import_obsidian.Setting(containerEl).setName("Background color").setDesc(descBackground).addText(
      (text) => text.setPlaceholder("var(--background-secondary)").setValue(this.plugin.settings.background).onChange(async (newValue) => {
        this.plugin.settings.background = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descBorder = document.createDocumentFragment();
    descBorder.append(
      "CSS border value. For help with border, see ",
      descBorder.createEl("a", {
        href: "https://developer.mozilla.org/en-US/docs/Web/CSS/border",
        text: "MDN: border",
        attr: { "aria-label": "https://developer.mozilla.org/en-US/docs/Web/CSS/border", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: none"
    );
    new import_obsidian.Setting(containerEl).setName("Border").setDesc(descBorder).addText(
      (text) => text.setPlaceholder("none").setValue(this.plugin.settings.border).onChange(async (newValue) => {
        this.plugin.settings.border = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descBorderRadius = document.createDocumentFragment();
    descBorderRadius.append(
      "CSS border-radius value. For available variables, see ",
      descBorderRadius.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Radiuses",
        text: "Radiuses",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Radiuses", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--radius-m)"
    );
    new import_obsidian.Setting(containerEl).setName("Border radius").setDesc(descBorderRadius).addText(
      (text) => text.setPlaceholder("var(--radius-m)").setValue(this.plugin.settings.borderRadius).onChange(async (newValue) => {
        this.plugin.settings.borderRadius = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Icon styles").setHeading();
    new import_obsidian.Setting(containerEl).setName("Show icon").setDesc("Default: disabled").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showIcon).onChange(async (newValue) => {
        this.plugin.settings.showIcon = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Icon").setDesc("To select an icon, click the button. Default: vault").addButton((cb) => {
      cb.setIcon(this.plugin.settings.icon).setTooltip("Select icon").onClick(async (e) => {
        e.preventDefault();
        const modal = new IconSuggestModal(this.plugin);
        modal.open();
      });
      cb.buttonEl.setAttribute("data-note-toolbar-no-icon", !this.plugin.settings.icon ? "true" : "false");
      cb.buttonEl.setAttribute("tabindex", "0");
      this.plugin.registerDomEvent(
        cb.buttonEl,
        "keydown",
        (e) => {
          switch (e.key) {
            case "Enter":
            case " ":
              e.preventDefault();
              const modal = new IconSuggestModal(this.plugin);
              modal.open();
          }
        }
      );
    });
    let descIconSize = document.createDocumentFragment();
    descIconSize.append(
      "CSS width/height value. For available variables, see ",
      descIconSize.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Icons#Icon+sizes",
        text: "Icon sizes",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Icons#Icon+sizes", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--icon-m)"
    );
    new import_obsidian.Setting(containerEl).setName("Icon size").setDesc(descIconSize).addText(
      (text) => text.setPlaceholder("var(--icon-m)").setValue(this.plugin.settings.iconSize).onChange(async (newValue) => {
        this.plugin.settings.iconSize = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descIconColor = document.createDocumentFragment();
    descIconColor.append(
      "CSS color value. For available variables, see ",
      descIconColor.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Colors",
        text: "Colors",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Colors", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      " and ",
      descIconColor.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Components/Navigation#CSS+variables",
        text: "Navigation",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Components/Navigation#CSS+variables", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--nav-item-color)"
    );
    new import_obsidian.Setting(containerEl).setName("Icon color").setDesc(descIconColor).addText(
      (text) => text.setPlaceholder("var(--nav-item-color)").setValue(this.plugin.settings.iconColor).onChange(async (newValue) => {
        this.plugin.settings.iconColor = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descIconRotate = document.createDocumentFragment();
    descIconRotate.append(
      "CSS transform: rotate() value. For help with rotate, see ",
      descIconRotate.createEl("a", {
        href: "https://developer.mozilla.org/en-US/docs/Web/CSS/rotate",
        text: "MDN: rotate",
        attr: { "aria-label": "https://developer.mozilla.org/en-US/docs/Web/CSS/rotate", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: 0deg"
    );
    new import_obsidian.Setting(containerEl).setName("Rotate").setDesc(descIconRotate).addText(
      (text) => text.setPlaceholder("0deg").setValue(this.plugin.settings.iconRotate).onChange(async (newValue) => {
        this.plugin.settings.iconRotate = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Title styles").setHeading();
    let descTitleColor = document.createDocumentFragment();
    descTitleColor.append(
      "CSS color value. For available variables, see ",
      descIconColor.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Colors",
        text: "Colors",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Colors", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      " and ",
      descTitleColor.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Components/Navigation#CSS+variables",
        text: "Navigation",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Components/Navigation#CSS+variables", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--nav-item-color)"
    );
    new import_obsidian.Setting(containerEl).setName("Color").setDesc(descTitleColor).addText(
      (text) => text.setPlaceholder("var(--nav-item-color)").setValue(this.plugin.settings.titleColor).onChange(async (newValue) => {
        this.plugin.settings.titleColor = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descFont = document.createDocumentFragment();
    descFont.append(
      "CSS font-family value. For available variables, see ",
      descFont.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Typography#Fonts",
        text: "Typography",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Typography#Fonts", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--font-interface)"
    );
    new import_obsidian.Setting(containerEl).setName("Font").setDesc(descFont).addText(
      (text) => text.setPlaceholder("var(--font-interface)").setValue(this.plugin.settings.titleFont).onChange(async (newValue) => {
        this.plugin.settings.titleFont = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descFontSize = document.createDocumentFragment();
    descFontSize.append(
      "CSS font-size value. For available variables, see ",
      descFontSize.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Typography#Font+size",
        text: "Typography",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Typography#Font+size", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--font-ui-medium)"
    );
    new import_obsidian.Setting(containerEl).setName("Font size").setDesc(descFontSize).addText(
      (text) => text.setPlaceholder("var(--font-ui-medium)").setValue(this.plugin.settings.titleFontSize).onChange(async (newValue) => {
        this.plugin.settings.titleFontSize = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descFontWeight = document.createDocumentFragment();
    descFontWeight.append(
      "CSS font-weight value. For available variables, see ",
      descFontWeight.createEl("a", {
        href: "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Typography#Font+weight",
        text: "Typography",
        attr: { "aria-label": "https://docs.obsidian.md/Reference/CSS+variables/Foundations/Typography#Font+weight", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: var(--font-normal)"
    );
    new import_obsidian.Setting(containerEl).setName("Font weight").setDesc(descFontWeight).addText(
      (text) => text.setPlaceholder("var(--font-normal)").setValue(this.plugin.settings.titleWeight).onChange(async (newValue) => {
        this.plugin.settings.titleWeight = newValue;
        await this.plugin.saveSettings();
      })
    );
    let descLetterSpacing = document.createDocumentFragment();
    descLetterSpacing.append(
      "CSS letter-spacing value. For help with letter-spacing, see ",
      descLetterSpacing.createEl("a", {
        href: "https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing",
        text: "MDN: letter-spacing",
        attr: { "aria-label": "https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      ". Default: normal"
    );
    new import_obsidian.Setting(containerEl).setName("Letter spacing").setDesc(descLetterSpacing).addText(
      (text) => text.setPlaceholder("normal").setValue(this.plugin.settings.titleLetterSpacing).onChange(async (newValue) => {
        this.plugin.settings.titleLetterSpacing = newValue;
        await this.plugin.saveSettings();
      })
    );
  }
};
var IconSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(plugin) {
    super(plugin.app);
    this.modalEl.addClass("vault-name-icon-select-modal");
    this.plugin = plugin;
    this.setPlaceholder("Search for an icon");
    this.setInstructions([
      { command: "\u2191\u2193", purpose: "to navigate" },
      { command: "\u21B5", purpose: "to use" },
      { command: "esc", purpose: "to dismiss" }
    ]);
  }
  getSuggestions(inputStr) {
    const iconIds = (0, import_obsidian.getIconIds)();
    const iconSuggestions = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    iconSuggestions.push("No icon");
    iconIds.forEach((icon) => {
      if (icon.toLowerCase().contains(lowerCaseInputStr)) {
        iconSuggestions.push(icon);
      }
    });
    return iconSuggestions;
  }
  renderSuggestion(icon, el) {
    el.addClass("vault-name-icon-suggestion");
    let iconName = el.createSpan();
    if (icon === "No icon") {
      iconName.setText(icon);
    } else {
      iconName.setText(icon.startsWith("lucide-") ? icon.substring(7) : icon);
      let iconGlyph = el.createSpan();
      (0, import_obsidian.setIcon)(iconGlyph, icon);
    }
  }
  /**
   * Saves the selected icon to settings, closes the modal, refreshes the parent.
   * @param selectedIcon Icon to save.
   */
  onChooseSuggestion(item, evt) {
    this.plugin.settings.icon = item;
    this.plugin.saveSettings();
    (0, import_obsidian.setIcon)(activeDocument.querySelector("[data-note-toolbar-no-icon]"), item);
    this.close();
  }
};
